{
  "address": "0xEe94c76bF8BC21341BEBfDf1e059135D7dCc06c4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "OnlyOwnerOrCoordinator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__InsufficientEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__NoRequestsYet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__RequestNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vote__WinnerNotSelected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "CoordinatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EntryReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        }
      ],
      "name": "UserVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userCandidateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winnerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasWon",
          "type": "bool"
        }
      ],
      "name": "Winner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLBACK_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTRANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterVote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasEntered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasUserWon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasWinner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomWinnerId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_subscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract IVRFCoordinatorV2Plus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "setCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x74fb7a40357e6c9bdf4421ace70dc4bf531f084dd0ecb3044f8cf74efb142aca",
  "receipt": {
    "to": null,
    "from": "0xf50cD5BB1fcE358CEBA035530CCa4956aA221A63",
    "contractAddress": "0xEe94c76bF8BC21341BEBfDf1e059135D7dCc06c4",
    "transactionIndex": 9,
    "gasUsed": "2302571",
    "logsBloom": "0x
    "blockHash": "0xe4fedc82f154984fd0d1ea2a95a0419b79e68bfcc9dd578d2e39344291796713",
    "transactionHash": "0x74fb7a40357e6c9bdf4421ace70dc4bf531f084dd0ecb3044f8cf74efb142aca",
    "logs": [],
    "blockNumber": 7843775,
    "cumulativeGasUsed": "7908429",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "56989853655162213739074828022812217193192306752547285741008570409357173507994"
  ],
  "numDeployments": 4,
  "solcInputHash": "d3e0fe02488fef269bd59c69bb6b212e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__InsufficientEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__NoRequestsYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__RequestNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vote__WinnerNotSelected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EntryReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"UserVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userCandidateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasWon\",\"type\":\"bool\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLBACK_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTRANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterVote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserWon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomWinnerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Vote\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"This contract enables users to place votes for pre-set candidates, which after generating a random number between 0-2 (0, 1, 2) via Chainlink VRF, returns back whether the candidate the user voted for won\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vote.sol\":\"Vote\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"contracts/Vote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {VRFConsumerBaseV2Plus} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\\\";\\nimport {VRFV2PlusClient} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\n\\n// errors\\nerror Vote__InsufficientEth();\\nerror Vote__InvalidCandidateId();\\nerror Vote__WinnerNotSelected();\\nerror Vote__RequestNotFound();\\nerror Vote__NoRequestsYet();\\n\\n/**\\n * @title Vote\\n * @notice This contract enables users to place votes for pre-set candidates, which after generating a random\\n * number between 0-2 (0, 1, 2) via Chainlink VRF, returns back whether the candidate the user voted for won\\n */\\ncontract Vote is VRFConsumerBaseV2Plus {\\n    // state variables\\n\\n    address private _owner;\\n\\n    // my subscription Id\\n    uint256 public s_subscriptionId;\\n\\n    // past request Id's\\n    uint256[] public requestIds;\\n\\n    // additional requirements\\n    bool public hasWinner;\\n    uint256 public constant ENTRANCE_FEE = 0.0001 ether;\\n    uint32 public constant CALLBACK_GAS_LIMIT = 100000;\\n    uint8 public constant REQUEST_CONFIRMATIONS = 3;\\n    uint8 public constant NUM_WORDS = 1;\\n    uint256 public randomWinnerId;\\n\\n    bytes32 public keyHash =\\n        0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae;\\n\\n    string[] public candidates = [\\n        \\\"Gregory the Gnome\\\",\\n        \\\"Bongo the Monkey\\\",\\n        \\\"Vladimir the Vampire\\\"\\n    ];\\n\\n    // events\\n    event UserVoted(address indexed user, uint256 candidateId);\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n    event Winner(uint256 userCandidateId, uint256 winnerId, bool hasWon);\\n    event EntryReceived(address indexed user, uint256 amount);\\n\\n    // structs\\n\\n    struct RequestStatus {\\n        bool fulfilled;\\n        bool exists;\\n        uint256[] randomWords;\\n    }\\n\\n    // mappings\\n    mapping(address => uint256) public userVotes;\\n    mapping(address => bool) public hasEntered;\\n    mapping(uint256 => RequestStatus) public s_requests;\\n\\n    // constructor\\n\\n    constructor(\\n        uint256 subscriptionId\\n    ) VRFConsumerBaseV2Plus(0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B) {\\n        s_subscriptionId = subscriptionId;\\n        _owner = msg.sender;\\n    }\\n\\n    // functions\\n\\n    function requestRandomWords() external returns (uint256 requestId) {\\n        randomWinnerId = 0;\\n        requestId = s_vrfCoordinator.requestRandomWords(\\n            VRFV2PlusClient.RandomWordsRequest({\\n                keyHash: keyHash,\\n                subId: s_subscriptionId,\\n                requestConfirmations: REQUEST_CONFIRMATIONS,\\n                callbackGasLimit: CALLBACK_GAS_LIMIT,\\n                numWords: NUM_WORDS,\\n                extraArgs: VRFV2PlusClient._argsToBytes(\\n                    VRFV2PlusClient.ExtraArgsV1({nativePayment: false})\\n                )\\n            })\\n        );\\n\\n        s_requests[requestId] = RequestStatus({\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n\\n        requestIds.push(requestId);\\n\\n        emit RequestSent(requestId, NUM_WORDS);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] calldata _randomWords\\n    ) internal override {\\n        if (!(s_requests[_requestId].exists)) {\\n            revert Vote__RequestNotFound();\\n        }\\n\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n\\n        randomWinnerId = (_randomWords[0] % 3);\\n\\n        hasWinner = true;\\n        emit RequestFulfilled(_requestId, _randomWords);\\n    }\\n\\n    function getLastRequestId() public view returns (uint) {\\n        if (requestIds.length == 0) {\\n            revert Vote__NoRequestsYet();\\n        }\\n\\n        return requestIds[requestIds.length - 1];\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\\n        if (!(s_requests[_requestId].exists)) {\\n            revert Vote__RequestNotFound();\\n        }\\n        RequestStatus memory request = s_requests[_requestId];\\n        return (request.fulfilled, request.randomWords);\\n    }\\n\\n    function enterVote() public payable {\\n        if (msg.value < ENTRANCE_FEE) {\\n            revert Vote__InsufficientEth();\\n        }\\n        emit EntryReceived(msg.sender, msg.value);\\n    }\\n\\n    function vote(uint candidateId) public {\\n        userVotes[msg.sender] = candidateId;\\n        emit UserVoted(msg.sender, candidateId);\\n    }\\n\\n    function hasUserWon() public {\\n        if (!hasWinner) {\\n            revert Vote__WinnerNotSelected();\\n        }\\n\\n        if (userVotes[msg.sender] == randomWinnerId) {\\n            emit Winner(userVotes[msg.sender], randomWinnerId, true);\\n        } else {\\n            emit Winner(userVotes[msg.sender], randomWinnerId, false);\\n        }\\n    }\\n\\n    function withdraw() external {\\n        require(msg.sender == _owner, \\\"Not the contract owner\\\");\\n        require(address(this).balance > 0, \\\"No ETH to withdraw\\\");\\n        payable(_owner).transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x43d5b9f6d93ffbc1d24220ca418032323e545ad0f634f8fc80ce233db3537e6b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c806379ba5097116100d15780639eccacf61161008a578063d00d9e1911610064578063d00d9e1914610551578063d8a4676f1461055b578063e0c8628914610599578063f2fde38b146105c457610181565b80639eccacf6146104bd578063a168fa89146104e8578063c1e9aa451461052657610181565b806379ba5097146103bf5780638796ba8c146103d65780638ac00021146104135780638da5cb5b1461043e5780638ea98117146104695780639755a7101461049257610181565b80633ccfd60b1161013e5780636219015011610118578063621901501461030157806367f082b01461033e578063726a2e701461036957806372cf6e341461039457610181565b80633ccfd60b146102a85780634cb66def146102bf57806361728f39146102d657610181565b80630121b93f1461018657806319c2b4c3146101af5780631fe543e3146101da57806324d70dea1461020357806333d608f1146102405780633477ee2e1461026b575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a8919061186e565b6105ed565b005b3480156101bb57600080fd5b506101c4610682565b6040516101d191906118aa565b60405180910390f35b3480156101e657600080fd5b5061020160048036038101906101fc919061192a565b6106f7565b005b34801561020f57600080fd5b5061022a600480360381019061022591906119e8565b6107bd565b6040516102379190611a30565b60405180910390f35b34801561024c57600080fd5b506102556107dd565b6040516102629190611a6a565b60405180910390f35b34801561027757600080fd5b50610292600480360381019061028d919061186e565b6107e4565b60405161029f9190611b15565b60405180910390f35b3480156102b457600080fd5b506102bd610890565b005b3480156102cb57600080fd5b506102d46109ce565b005b3480156102e257600080fd5b506102eb610b5e565b6040516102f89190611b50565b60405180910390f35b34801561030d57600080fd5b50610328600480360381019061032391906119e8565b610b64565b60405161033591906118aa565b60405180910390f35b34801561034a57600080fd5b50610353610b7c565b6040516103609190611b87565b60405180910390f35b34801561037557600080fd5b5061037e610b81565b60405161038b91906118aa565b60405180910390f35b3480156103a057600080fd5b506103a9610b87565b6040516103b69190611b87565b60405180910390f35b3480156103cb57600080fd5b506103d4610b8c565b005b3480156103e257600080fd5b506103fd60048036038101906103f8919061186e565b610d21565b60405161040a91906118aa565b60405180910390f35b34801561041f57600080fd5b50610428610d45565b60405161043591906118aa565b60405180910390f35b34801561044a57600080fd5b50610453610d4b565b6040516104609190611bb1565b60405180910390f35b34801561047557600080fd5b50610490600480360381019061048b91906119e8565b610d74565b005b34801561049e57600080fd5b506104a7610f55565b6040516104b49190611a30565b60405180910390f35b3480156104c957600080fd5b506104d2610f68565b6040516104df9190611c2b565b60405180910390f35b3480156104f457600080fd5b5061050f600480360381019061050a919061186e565b610f8e565b60405161051d929190611c46565b60405180910390f35b34801561053257600080fd5b5061053b610fcc565b60405161054891906118aa565b60405180910390f35b610559610fd6565b005b34801561056757600080fd5b50610582600480360381019061057d919061186e565b611066565b604051610590929190611d2d565b60405180910390f35b3480156105a557600080fd5b506105ae611188565b6040516105bb91906118aa565b60405180910390f35b3480156105d057600080fd5b506105eb60048036038101906105e691906119e8565b6113d8565b005b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ff96c2f69411bb3382b4317aa45d6825624b91ceeac9ff0d68b911356d1dcf07c8260405161067791906118aa565b60405180910390a250565b600080600580549050036106c2576040517f2236d4b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560016005805490506106d69190611d8c565b815481106106e7576106e6611dc0565b5b9060005260206000200154905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ad5733600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016107a4929190611def565b60405180910390fd5b6107b88383836113ec565b505050565b600b6020528060005260406000206000915054906101000a900460ff1681565b620186a081565b600981815481106107f457600080fd5b90600052602060002001600091509050805461080f90611e47565b80601f016020809104026020016040519081016040528092919081815260200182805461083b90611e47565b80156108885780601f1061085d57610100808354040283529160200191610888565b820191906000526020600020905b81548152906001019060200180831161086b57829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091790611ec4565b60405180910390fd5b60004711610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a90611f30565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156109cb573d6000803e3d6000fd5b50565b600660009054906101000a900460ff16610a14576040517f1bb1203e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600754600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610ade577fba972d86ca21af421babbe65125f5e093393a91f6f19c2381313616393207447600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546007546001604051610ad193929190611f50565b60405180910390a1610b5c565b7fba972d86ca21af421babbe65125f5e093393a91f6f19c2381313616393207447600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546007546000604051610b5393929190611f50565b60405180910390a15b565b60085481565b600a6020528060005260406000206000915090505481565b600381565b60075481565b600181565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1390611fd3565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60058181548110610d3157600080fd5b906000526020600020016000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d7c610d4b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610e055750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610e745733610e13610d4b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f061db9c1000000000000000000000000000000000000000000000000000000008152600401610e6b93929190611ff3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610eda576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be681604051610f4a9190611bb1565b60405180910390a150565b600660009054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b655af3107a400081565b655af3107a4000341015611016576040517fdf019a8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fd70a71afcd8fceba302ccfe44d8bfdad281302a3b9387bd115f8fbf73f78f4333460405161105c91906118aa565b60405180910390a2565b60006060600c600084815260200190815260200160002060000160019054906101000a900460ff166110c4576040517ffc2bc12600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c60008581526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820180548060200260200160405190810160405280929190818152602001828054801561116957602002820191906000526020600020905b815481526020019060010190808311611155575b5050505050815250509050806000015181604001519250925050915091565b600080600781905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b1c385e6040518060c0016040528060085481526020016004548152602001600360ff1661ffff168152602001620186a063ffffffff168152602001600160ff1663ffffffff168152602001611231604051806020016040528060001515815250611523565b8152506040518263ffffffff1660e01b81526004016112509190612143565b6020604051808303816000875af115801561126f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611293919061217a565b90506040518060600160405280600015158152602001600115158152602001600067ffffffffffffffff8111156112cd576112cc6121a7565b5b6040519080825280602002602001820160405280156112fb5781602001602082028036833780820191505090505b50815250600c600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550604082015181600101908051906020019061136e929190611777565b5090505060058190806001815401808255809150506001900390600052602060002001600090919091909150557fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee8160016040516113cd929190612207565b60405180910390a190565b6113e06115bb565b6113e98161164b565b50565b600c600084815260200190815260200160002060000160019054906101000a900460ff16611446576040517ffc2bc12600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600c600085815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508181600c6000868152602001908152602001600020600101919061149a9291906117c4565b506003828260008181106114b1576114b0611dc0565b5b905060200201356114c2919061225f565b6007819055506001600660006101000a81548160ff0219169083151502179055507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d838383604051611516939291906122fa565b60405180910390a1505050565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa826040516024016115579190612357565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611649576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611640906123be565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b09061242a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b8280548282559060005260206000209081019282156117b3579160200282015b828111156117b2578251825591602001919060010190611797565b5b5090506117c09190611811565b5090565b828054828255906000526020600020908101928215611800579160200282015b828111156117ff5782358255916020019190600101906117e4565b5b50905061180d9190611811565b5090565b5b8082111561182a576000816000905550600101611812565b5090565b600080fd5b600080fd5b6000819050919050565b61184b81611838565b811461185657600080fd5b50565b60008135905061186881611842565b92915050565b6000602082840312156118845761188361182e565b5b600061189284828501611859565b91505092915050565b6118a481611838565b82525050565b60006020820190506118bf600083018461189b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126118ea576118e96118c5565b5b8235905067ffffffffffffffff811115611907576119066118ca565b5b602083019150836020820283011115611923576119226118cf565b5b9250929050565b6000806000604084860312156119435761194261182e565b5b600061195186828701611859565b935050602084013567ffffffffffffffff81111561197257611971611833565b5b61197e868287016118d4565b92509250509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119b58261198a565b9050919050565b6119c5816119aa565b81146119d057600080fd5b50565b6000813590506119e2816119bc565b92915050565b6000602082840312156119fe576119fd61182e565b5b6000611a0c848285016119d3565b91505092915050565b60008115159050919050565b611a2a81611a15565b82525050565b6000602082019050611a456000830184611a21565b92915050565b600063ffffffff82169050919050565b611a6481611a4b565b82525050565b6000602082019050611a7f6000830184611a5b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611abf578082015181840152602081019050611aa4565b60008484015250505050565b6000601f19601f8301169050919050565b6000611ae782611a85565b611af18185611a90565b9350611b01818560208601611aa1565b611b0a81611acb565b840191505092915050565b60006020820190508181036000830152611b2f8184611adc565b905092915050565b6000819050919050565b611b4a81611b37565b82525050565b6000602082019050611b656000830184611b41565b92915050565b600060ff82169050919050565b611b8181611b6b565b82525050565b6000602082019050611b9c6000830184611b78565b92915050565b611bab816119aa565b82525050565b6000602082019050611bc66000830184611ba2565b92915050565b6000819050919050565b6000611bf1611bec611be78461198a565b611bcc565b61198a565b9050919050565b6000611c0382611bd6565b9050919050565b6000611c1582611bf8565b9050919050565b611c2581611c0a565b82525050565b6000602082019050611c406000830184611c1c565b92915050565b6000604082019050611c5b6000830185611a21565b611c686020830184611a21565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611ca481611838565b82525050565b6000611cb68383611c9b565b60208301905092915050565b6000602082019050919050565b6000611cda82611c6f565b611ce48185611c7a565b9350611cef83611c8b565b8060005b83811015611d20578151611d078882611caa565b9750611d1283611cc2565b925050600181019050611cf3565b5085935050505092915050565b6000604082019050611d426000830185611a21565b8181036020830152611d548184611ccf565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d9782611838565b9150611da283611838565b9250828203905081811115611dba57611db9611d5d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050611e046000830185611ba2565b611e116020830184611ba2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e5f57607f821691505b602082108103611e7257611e71611e18565b5b50919050565b7f4e6f742074686520636f6e7472616374206f776e657200000000000000000000600082015250565b6000611eae601683611a90565b9150611eb982611e78565b602082019050919050565b60006020820190508181036000830152611edd81611ea1565b9050919050565b7f4e6f2045544820746f2077697468647261770000000000000000000000000000600082015250565b6000611f1a601283611a90565b9150611f2582611ee4565b602082019050919050565b60006020820190508181036000830152611f4981611f0d565b9050919050565b6000606082019050611f65600083018661189b565b611f72602083018561189b565b611f7f6040830184611a21565b949350505050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611fbd601683611a90565b9150611fc882611f87565b602082019050919050565b60006020820190508181036000830152611fec81611fb0565b9050919050565b60006060820190506120086000830186611ba2565b6120156020830185611ba2565b6120226040830184611ba2565b949350505050565b61203381611b37565b82525050565b600061ffff82169050919050565b61205081612039565b82525050565b61205f81611a4b565b82525050565b600081519050919050565b600082825260208201905092915050565b600061208c82612065565b6120968185612070565b93506120a6818560208601611aa1565b6120af81611acb565b840191505092915050565b600060c0830160008301516120d2600086018261202a565b5060208301516120e56020860182611c9b565b5060408301516120f86040860182612047565b50606083015161210b6060860182612056565b50608083015161211e6080860182612056565b5060a083015184820360a08601526121368282612081565b9150508091505092915050565b6000602082019050818103600083015261215d81846120ba565b905092915050565b60008151905061217481611842565b92915050565b6000602082840312156121905761218f61182e565b5b600061219e84828501612165565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006121f16121ec6121e784611b6b565b611bcc565b611a4b565b9050919050565b612201816121d6565b82525050565b600060408201905061221c600083018561189b565b61222960208301846121f8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061226a82611838565b915061227583611838565b92508261228557612284612230565b5b828206905092915050565b600080fd5b82818337505050565b60006122aa8385611c7a565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156122dd576122dc612290565b5b6020830292506122ee838584612295565b82840190509392505050565b600060408201905061230f600083018661189b565b818103602083015261232281848661229e565b9050949350505050565b61233581611a15565b82525050565b602082016000820151612351600085018261232c565b50505050565b600060208201905061236c600083018461233b565b92915050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006123a8601683611a90565b91506123b382612372565b602082019050919050565b600060208201905081810360008301526123d78161239b565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000612414601783611a90565b915061241f826123de565b602082019050919050565b6000602082019050818103600083015261244381612407565b905091905056fea26469706673582212207992e706493bffd161b213e85538bc45cea725f5371b3821e36b1f15f527158964736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Vote",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "setCoordinator(address)": {
        "notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "notice": "This contract enables users to place votes for pre-set candidates, which after generating a random number between 0-2 (0, 1, 2) via Chainlink VRF, returns back whether the candidate the user voted for won",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/Vote.sol:Vote",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/Vote.sol:Vote",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/Vote.sol:Vote",
        "label": "s_vrfCoordinator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVRFCoordinatorV2Plus)380"
      },
      {
        "astId": 546,
        "contract": "contracts/Vote.sol:Vote",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 548,
        "contract": "contracts/Vote.sol:Vote",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 551,
        "contract": "contracts/Vote.sol:Vote",
        "label": "requestIds",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 553,
        "contract": "contracts/Vote.sol:Vote",
        "label": "hasWinner",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 567,
        "contract": "contracts/Vote.sol:Vote",
        "label": "randomWinnerId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 570,
        "contract": "contracts/Vote.sol:Vote",
        "label": "keyHash",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 577,
        "contract": "contracts/Vote.sol:Vote",
        "label": "candidates",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 622,
        "contract": "contracts/Vote.sol:Vote",
        "label": "userVotes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 626,
        "contract": "contracts/Vote.sol:Vote",
        "label": "hasEntered",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 631,
        "contract": "contracts/Vote.sol:Vote",
        "label": "s_requests",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)618_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVRFCoordinatorV2Plus)380": {
        "encoding": "inplace",
        "label": "contract IVRFCoordinatorV2Plus",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)618_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vote.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)618_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RequestStatus)618_storage": {
        "encoding": "inplace",
        "label": "struct Vote.RequestStatus",
        "members": [
          {
            "astId": 612,
            "contract": "contracts/Vote.sol:Vote",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 614,
            "contract": "contracts/Vote.sol:Vote",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 617,
            "contract": "contracts/Vote.sol:Vote",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}